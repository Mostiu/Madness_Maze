//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scritps/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""main map"",
            ""id"": ""03e6e067-0178-4558-b81f-745a28f55f9c"",
            ""actions"": [
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Button"",
                    ""id"": ""ef4ad3ee-f7ca-4fe4-8ce5-328092073b6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Button"",
                    ""id"": ""7c47c71e-fb4a-4d0f-81fb-2d4ea09f89e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillUse"",
                    ""type"": ""Button"",
                    ""id"": ""017af5cc-b04e-4aa3-87c6-058a9acdc443"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""bece6b4c-8ab9-4ab3-b71b-6f8f1603061e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""3f6f56b5-2730-4f7a-b343-bcc4d216e261"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""0643cc5f-a62b-4f74-a6d5-b97de9111b43"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5056725e-216c-47a2-b68b-e204bf769471"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cc1fb2cb-10ef-4234-aff8-4db26dc273be"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""432324f8-bcd9-486f-99f8-ae5215f59278"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cdf45c30-4abb-459c-b983-86a4a5297d7e"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SkillUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // main map
        m_mainmap = asset.FindActionMap("main map", throwIfNotFound: true);
        m_mainmap_UpDown = m_mainmap.FindAction("UpDown", throwIfNotFound: true);
        m_mainmap_LeftRight = m_mainmap.FindAction("LeftRight", throwIfNotFound: true);
        m_mainmap_SkillUse = m_mainmap.FindAction("SkillUse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // main map
    private readonly InputActionMap m_mainmap;
    private List<IMainmapActions> m_MainmapActionsCallbackInterfaces = new List<IMainmapActions>();
    private readonly InputAction m_mainmap_UpDown;
    private readonly InputAction m_mainmap_LeftRight;
    private readonly InputAction m_mainmap_SkillUse;
    public struct MainmapActions
    {
        private @InputController m_Wrapper;
        public MainmapActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpDown => m_Wrapper.m_mainmap_UpDown;
        public InputAction @LeftRight => m_Wrapper.m_mainmap_LeftRight;
        public InputAction @SkillUse => m_Wrapper.m_mainmap_SkillUse;
        public InputActionMap Get() { return m_Wrapper.m_mainmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainmapActions set) { return set.Get(); }
        public void AddCallbacks(IMainmapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainmapActionsCallbackInterfaces.Add(instance);
            @UpDown.started += instance.OnUpDown;
            @UpDown.performed += instance.OnUpDown;
            @UpDown.canceled += instance.OnUpDown;
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @SkillUse.started += instance.OnSkillUse;
            @SkillUse.performed += instance.OnSkillUse;
            @SkillUse.canceled += instance.OnSkillUse;
        }

        private void UnregisterCallbacks(IMainmapActions instance)
        {
            @UpDown.started -= instance.OnUpDown;
            @UpDown.performed -= instance.OnUpDown;
            @UpDown.canceled -= instance.OnUpDown;
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @SkillUse.started -= instance.OnSkillUse;
            @SkillUse.performed -= instance.OnSkillUse;
            @SkillUse.canceled -= instance.OnSkillUse;
        }

        public void RemoveCallbacks(IMainmapActions instance)
        {
            if (m_Wrapper.m_MainmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainmapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainmapActions @mainmap => new MainmapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMainmapActions
    {
        void OnUpDown(InputAction.CallbackContext context);
        void OnLeftRight(InputAction.CallbackContext context);
        void OnSkillUse(InputAction.CallbackContext context);
    }
}
